const ll maxn = 2e5+5;
vll adj[maxn+3];
ll n, m;

// vis not used here
vi vis(maxn+3, 0);

// below will be used in dfs, tin and tout
// 0 -> not visited, 1 - > under processing, 2 - > done processing
vi col(maxn+3, 0);
bool cycle_present = 0;
vi ans;

void dfs(int v){
    col[v] = 1;
    for(int u: adj[v]){
        if(col[u]==0){
            dfs(u);
        }
        else if(col[u]==1){
            cycle_present = 1;
        }
        else if(col[u]==2){
            // nothing needed
        }
    }
    col[v]=2;
    ans.pb(v);
}

void top_sort(){
    fill_n(col.begin(),n+2,0);
    // check 1 to n or 0 to n-1
    fo(i,1,n){
        if(col[i]==0){
            dfs(i);
        }
    }
}

void solve()
{
    cin>>n>>m;
    fo(i,1,m){ ll u, v; cin>>u>>v; adj[u].pb(v); adj[v].pb(u); }
    top_sort();
    if(!cycle_present){
        reverse(all(ans));
        show(ans,sz(ans));
    }
    else{
        pp("Impossible");
    }
}
